import socket
from datetime import datetime, timedelta


class ClientEntity:
    def __init__(self, nickname):
        self.nickname = nickname
        self.last_visit = datetime.now()


class Server(object):
    def __init__(self, hostname, port):
        self.clients = {}

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–∫–µ—Ç
        self.udp_server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

        # start server
        self.udp_server.bind((hostname, port))

        print("[INFO] Server running on {}:{}".format(hostname, port))

        while True:

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data, addr = self.udp_server.recvfrom(1024)  # buffer size is 1024 bytes


            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å
            if addr not in self.clients:
                print(f"New client connected: {addr}")

                self.clients[addr] = ClientEntity(data.decode())
                continue


            # –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
            print(f"Received message from {addr}: {data.decode()}")


            # –†–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º  –∫–ª–∏–µ–Ω—Ç–∞–º
            self.send_message(data, addr)

    def send_message(self, message, addr):
        emojis = {
            ":)": "üòä",
            ":(": "‚òπÔ∏è",
            ":D": "üòÑ",
            "<3": "‚ù§Ô∏è",
            "<>": "üí©"
        }

        if len(self.clients) <= 0:
            return

        clients_to_remove = set()
        time_for_expire = datetime.now() - timedelta(hours=1)
        for client_addr in self.clients:
            client = self.clients[client_addr]
            # –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å, —Ç–æ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –∞ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º
            if client_addr == addr:
                client.last_visit = datetime.now()
                continue

            # –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏—á–∞–ª –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞, —Ç–æ –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç —É–¥–∞–ª–∏—Ç—å –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏
            if time_for_expire > client.last_visit:
                clients_to_remove.add(client_addr)
                continue

            msg = client.nickname + ": " + message.decode()

            # –∑–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
            for emoji, emoji_unicode in emojis.items():
                msg = msg.replace(emoji, emoji_unicode)

            self.udp_server.sendto(msg.encode(), client_addr)

        for c in clients_to_remove:
            del self.clients[c]


if __name__ == "__main__":
    port = 5555
    hostname = "localhost"

    chat_server = Server(hostname, port)